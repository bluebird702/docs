#+STARTUP: showall
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage{kotex}
#+LATEX_HEADER: \usepackage{CJKutf8}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage[scale=0.75,twoside,bindingoffset=5mm]{geometry}
#+LATEX_HEADER: \usepackage[onehalfspacing]{setspace}
#+LATEX_HEADER: \usepackage{longtable}
#+AUTHOR: billy.angels
#+TITLE: Scala with Cats


* 3.Functors
이 챕터에서는 *functors*에 대해서 살펴볼 것이다. functor는 List, Option 및 다른 수많은 가능한 것들 중에 operation의 순서를 표현할 수 있도록 해주는 추상화이다. Functor 자체는 그렇게 유용하지 않지만, *monads*와 *applicative functors*와 같은 특별한 functor들은 Cats에서 매우 일반적으로 사용되는 추상화들이다
** Examples of Functors
functor는 map method를 가지고 있는 것은 어떤 것이든 functor라고 할 수 있다. 아마 map을 가지고 있는 많은 타입들을 알고 있을 것이다: Option, List, Either 등

일반적으로 List를 순회할 때 map을 처음 만나게 된다. 하지만, functor를 이해하기 위해서는 method를 다르게 생각해볼 필요가 있다. list를 순회한다고 보기 보다는, 모든 값들을 변환한다고 생각해야 한다. 적용하기 위한 function을 정의하면, map은 이 function이 모든 item에 적용된다는 것을 보장한다. 값은 변경되지만 list의 구조는 그대로 남는다.

#+BEGIN_SRC scala
 List(1, 2, 3).map(n => n + 1)
// res0: List[Int] = List(2, 3, 4)
#+END_SRC 

이와 유사하게, Option에 map을 사용할 때, content를 변환하면서도 Some이나 None context를 변경하지 않을 수 있다.

[[file:./images/Figure3.1.png]]

동일한 원칙이 Left, Right context와 함께 Either에 적용된다. 이 transformation의 일반적인 개념은 서로 다른 data type간의 map의 해동이 어떻게 연결되는가에 대한 것이다.

map이 변환되지 않은 context의 구조를 벗어나기 때문에, 우리는 초기 data 구조의 content에서 여러번의 computation을 반복해서 하기 위해 map을 반복해서 호출할 수 있다.

#+BEGIN_SRC scala
List(1, 2, 3).
  map(n => n + 1).
  map(n => n * 2).
  map(n => n + "!")
// res1: List[String] = List(4!, 6!, 8!)
#+END_SRC 

map을 iteration pattern으로 생각하면 안된다. 관련된 data type에 의해 작성된 몇몇 문제들을 무시하고 값에 대한 계산을 순차적으로 처리할 수 있는 방법이라고 생각해야 한다

- Option: 값이 있거나 혹은 없거나
- Either: 값 혹은 error
- List: zero 혹은 다른 값들

** More Examples of Functors
List, Option, Either의 map method는 함수들을 미리 적용할 수 있다. 하지만, 순차적인 computation이라는 아이디어는 이거보다 훨씬 더 general하다. 다른 방식의 페턴을 적용하는 몇몇 다른 functor의 행동을 살펴보자.

*Future*
Future는 큐잉하고 predecessor를 완전하게 적용함으로써  비동기적인 computation을 순차적으로 할 수 있는 functor이다. Future의 map method의 type signature는 위의 signature와 동일한 형태를 가진다. 하지만, 그 동작은 매우 다르다.

Future를 사용할 때에는, Future의 내부 상태를 전혀 보장할 수 없다. wrapped computation은 ongoing, complete, rejected일 수 있다. 만약 Future가 complete이면, mapping function이 바로 호출될 수 있다. 만약 complete가 아니라면, 몇몇 쓰레드풀이 function call을 큐잉하고 나중에 다시 돌아온다. function이 호출될 때를 알지 못하지만 어떤 순서로 호출될 것인지는 알 수 있다. 이러한 방식에서, Future는 List, Option, Either에서 본 것과 동일한 순서의 행동을 제공한다.

#+BEGIN_SRC scala
import scala.concurrent.{Future, Await}
import scala.concurrent.ExecutionContext.Implicits.global import scala.concurrent.duration._

val future: Future[String] =
  Future(123).
    map(n => n + 1).
    map(n => n * 2).
    map(n => n + "!")

Await.result(future, 1.second)
// res3: String = 248!
#+END_SRC

#+BEGIN_EXAMPLE
Futures and Referential Transparency

Scala의 Future는 pure functional programming의 예제로서는 그닥 좋지 않다. 왜냐하면 Future가 referentially transparent하지 않기 때문이다. Future는 항상 처리하고 결과를 캐싱한다.그리고 이 행동을 수정할 수 있는 방법이 없다. 다시 말해 side-effect가 있는 computation을 Future로 싼다면 예측할수 없는 결과를 얻을 수 있다. 예를 들면:

import scala.util.Random
val future1 = {
  // Initialize Random with a fixed seed:
  val r = new Random(0L)

  // nextInt has the side-effect of moving to
  // the next random number in the sequence:
  val x = Future(r.nextInt)

  for {
    a <- x
    b <- x
  } yield (a, b)
}

val future2 = {
  val r = new Random(0L)

  for {
    a <- Future(r.nextInt)
    b <- Future(r.nextInt)
  } yield (a, b)
}

val result1 = Await.result(future1, 1.second)
// result1: (Int, Int) = (-1155484576,-1155484576)
val result2 = Await.result(future2, 1.second)
// result2: (Int, Int) = (-1155484576,-723955400)

이상적으로 result1과 result2는 같은 값을 가져야 한다. 하지만, future1의 연산이 nextInt를 한번 호출하고 future2의 연산이 nextnt를 두번 호출한다. 왜냐하면 nextInt는 각각에 대해서 매번 다른 결과를 return하기 떄문이다.

이런 차이의 종류는 Future와 side-effect를 포함한 프로그램에 대한 추론을 어렵게 한다. Future 행동의 문제가 되는 부분은 또 있다. 사용자가 연산이 수행되어야만 할 때 지시할 수 있도록 하는 것보다 항상 즉시 연산을 시작한다는 것이다. 더 자세한 정보는 이 훌륭한 Stack Overflow answer를 참조하자
#+END_EXAMPLE

만약 Future가 referentially transparent하지 않다면, 아마 또다른 유사한 data-type을 살펴봐야만 할 것이다. 이것을 인지해야 한다. 

*Functions(?!)*
하나의 인자를 가지는 function도 functor이다. 이걸 확인하려면 type을 가지고 약간 장난을 쳐야한다. function A => B는 두개의 type parameter를 가진다. parameter type A와 result type B이다. 정확한 모양을 강압하기 위해서, parameter type을 고정하고 result type을 다양하게 할 수 있다.

- X => A로 시작
- A => B인 function을 제공
- X => B를 얻음

만약 X => A를 MyFunc[A]라고 하면, 이 챕터의 다른 예제에서 보아왔던 type과 같은 패턴을 볼 수 있다. Future 3.3에서 이런걸 봤다.

- MyFunc[A]로 시작
- A => B인 function을 제공
- MyFunc[B]를 얻음

다시 말해, Function1에 대한 "mapping"은 function composition이다. 

#+BEGIN_SRC scala
import cats.instances.function._ // for Functor
import cats.syntax.functor._     // for map

val func1: Int => Double =
  (x: Int) => x.toDouble

val func2: Double => Double =
  (y: Double) => y * 2

(func1 map func2)(1)     // composition using map
// res7: Double = 2.0

(func1 andThen func2)(1) // composition using andThen
// res8: Double = 2.0

func2(func1(1))          // composition written out by hand
// res9: Double = 2.0
#+END_SRC

어떻게 이것이 순차적인 operation의 일반적인 패턴과 연관이 있을까? 만약 그렇게 생각한다면, function composition은 순차적인것이다. 하나의 동작을 수행하는 함수로 시작해서 항상 우리는 그 chain에 다른 동작을 추가하기 위해서 map을 사용한다. map을 호출하는 것은 실제로 어떤 동작도 수행하는 것이 아니지만, 만약 인자를 모든 동작의 마지막 함수에 전달하면, 모든 동작은 순차적으로 실행된다. 이것을 Future와 유사한 lazily queueing up operation이라고 생각할 수 있다.

#+BEGIN_SRC scala
val func =
  ((x: Int) => x.toDouble).
    map(x => x + 1).
    map(x => x * 2).
    map(x => x + "!")

func(123)
// res10: String = 248.0!
#+END_SRC

#+BEGIN_QUOTE
/Partial Unification/
위의 예제가 동작할 수 있도록 하기 위해서 다음의 compiler option을 build.sbt에 추가할 필요가 있다.

#+BEGIN_SRC scala
scalacOptions += "-Ypartial-unification"
#+END_SRC

그렇지 않으면 컴파일러 에러가 발생할 것이다.

#+BEGIN_SRC scala
func1.map(func2)
// <console>: error: value map is not a member of Int => Double // func1.map(func2)
#+END_SRC

왜 이런 일이 일어나는지는 Section 3.8에서 자세히 살펴볼 것이다.
#+END_QUOTE

** Definition of a Functor


#+BEGIN_SRC scala
package cats

import scala.language.higherKinds

trait Functor[F[_]] {
  def map[A, B](fa: F[A])(f: A => B): F[B]
}
#+END_SRC

#+BEGIN_QUOTE
Functor Laws

Functor는 우리가 하나씩 작은 동작을 순차적으로 처리하거나 mapping전에 하나의 큰 function으로 combine하던 동일한 semantic을 보장한다. 이를 보장하기 위해서 다음의 규칙을 만족해야만 한다.

/Identity/: identity function과 함께 map을 호출하는 것은 아무것도 안하는 것과 동일하다

#+BEGIN_SRC scala
fa.map(a => a) == fa
#+END_SRC

/Composition/: 두 function인 f와 g를 mapping하는 것은 f를 mapping하고 g를 mapping하는 것과 같다.

#+BEGIN_SRC scala
fa.map(g(f(_))) == fa.map(f).map(g)
#+END_SRC
#+END_QUOTE

** Aside: Higher Kinds and Type Constructors
Kind는 type을 위한 type이다. Kind는 type에 있는 많은 "holes"을 설명한다. hole을 가지고 있지 않은 일반적인 type들과 type을 생성하기 위해서 채워넣을 수 있는 hole을 가지고 있는 "type constructors"를 구별한다. 

에를 들어, List는 하나의 hole을 가진 type constructor이다. List[Int]나 List[A]와 같은 regular type을 만들어 내는 parameter를 정의해서 hole을 채울 수 있다. 이 트릭은 generic type의 type constructor를 혼동시키지 않는다. List는 type constructor이고 List[A]는 type이다:

#+BEGIN_SRC scala
List    // type constructor, takes one parameter
List[A] // type, produced using a type parameter
#+END_SRC

function과 value를 가진 유사한 analogy가 있다. Function은 "value constructor"이다-value constructor는 parameter를 제공할 때 value를 생성할 수 있다.

#+BEGIN_SRC scala
math.abs    // function, takes one parameter
math.abs(x) // value, produced using a value parameter
#+END_SRC

Scala에서는 underscore를 사용해서 type constructor를 정의한다. 일단 한번 type constructor를 정의해놓으면 간단한 identifier로 참조할 수 있다.

#+BEGIN_SRC scala
// Declare F using underscores:
def myMethod[F[_]] = {
  // Reference F without underscores:
  val functor = Functor.apply[F]
  // ...
}
#+END_SRC

function의 parameter를 정의하는 것은과 이를 참조하는 것은 유사하다

#+BEGIN_SRC scala
// Declare f specifying parameters:
val f = (x: Int) => x * 2

// Reference f without parameters:
val f2 = f andThen f
#+END_SRC

type constructor의 지식을 가지고, 우리는 List, Option, Future, MyFunc와 같은 type alias들 같은 어떤 single-parameter type constructor를 가진 instance를 생성할 수 있도록 하는 Functor에 대한 Cats definition을 살펴보자

#+BEGIN_QUOTE
/Language Feature Imports/

Higher kinded types는 Scala에서 advanced language feature로 생각된다. A[_] 문법을 가진 type constructor를 정의할 때마다, 컴파일러로부터 warning을 없애기 위해 higher kinded type language feature를 "enabled"할 필요가 있다. "language import"로 이를 켜거나

#+BEGIN_SRC scala
import scala.language.higherKinds
#+END_SRC

build.sbt에 scalacOptions를 추가하자

#+BEGIN_SRC scala
scalacOptions += "-language:higherKinds"
#+END_SRC

가능하면 명시적으로 language import를 사용할 것이다. 하지만 실제로는 scalacOptions flag를 사용하는 것이 더 간단하고 코드도 짧다
#+END_QUOTE

** Functors in Cats
Cats에서의 functor의 구현을 살펴보자. monoid를 위해서 했던 부분을 살펴볼 것이다: type class, instances, syntax

*** The Functor Type Class
functor type class는 cats.Functor이다. companion object에 있는 표준 Functor.apply를 사용해서 instance를 얻을수 있다. 일반적으로 기본 instance는 cats.instances package에 있는 type에 의해 조정된다.

#+BEGIN_SRC scala
import scala.language.higherKinds
import cats.Functor
import cats.instances.list._   // for Functor
import cats.instances.option._ // for Functor

val list1 = List(1, 2, 3)
// list1: List[Int] = List(1, 2, 3)

val list2 = Functor[List].map(list1)(_ * 2)
// list2: List[Int] = List(2, 4, 6)

val option1 = Option(123)
// option1: Option[Int] = Some(123)

val option2 = Functor[Option].map(option1)(_.toString) 
// option2: Option[String] = Some(123)
#+END_SRC

Functor는 A => B type의 함수를 F[A] => F[B] type을 같는 functor로 변환하는 lift method를 제공한다. 

#+BEGIN_SRC scala
val func = (x: Int) => x + 1
// func: Int => Int = <function1>

val liftedFunc = Functor[Option].lift(func)
// liftedFunc: Option[Int] => Option[Int] = cats.Functor$$Lambda$12952101985314@120e192a

liftedFunc(Option(1))
// res0: Option[Int] = Some(2)
#+END_SRC

*** Functor Syntax
Functor를 위한 syntax에 의해서 제공되는 main method는 map이다. Options과 Lists를 가진 Functor를 증명하는 것은 어렵고 Scala compiler는 항상 extension method에 있는 built-in method를 항상 선호할 것이다. 우리는 이를 두가지 예제를 통해 살펴볼 것이다.

우선 function간의 mapping을 보자. Scala의 Function1 type은 map method를 안가지고 있으므로 naming conflict는 없다:

#+BEGIN_SRC scala
import cats.instances.function._ // for Functor
import cats.syntax.functor._     // for map

val func1 = (a: Int) => a + 1
val func2 = (a: Int) => a * 2
val func3 = (a: Int) => a + "!"
val func4 = func1.map(func2).map(func3)

func4(123)
// res1: String = 248!
#+END_SRC

또다른 예제를 보자. 이번에는 functor들을 추상화할 것이고 어떤 특정한 type으로도 돌리지 않을 것이다. 어떤 functor context든 간에 number에 대한 방정식을 수행하는 method를 작성할 것이다.

#+BEGIN_SRC scala
def doMath[F[_]](start: F[Int])
    (implicit functor: Functor[F]): F[Int] =
  start.map(n => n + 1 * 2)

import cats.instances.option._ // for Functor
import cats.instances.list._   // for Functor

doMath(Option(20))
// res3: Option[Int] = Some(22)

doMath(List(1, 2, 3))
// res4: List[Int] = List(3, 4, 5)

#+END_SRC

이것이 어떻게 동작하는지 설명하기 위해서 cats.syntax.functor에 있는 map method의 정의를 살펴보자. 아래는 코드를 간략화한 버전이다

#+BEGIN_SRC scala
implicit class FunctorOps[F[_], A](src: F[A]) {
  def map[B](func: A => B)
      (implicit functor: Functor[F]): F[B] =
    functor.map(src)(func)
}
#+END_SRC

compiler는 사용가능한 built-in map이 없는 모든 곳에서 map method를 삽입하기 위해 이 확장 method를 사용할 수 있다.

#+BEGIN_SRC scala
foo.map(value => value + 1)
#+END_SRC

foo가 built-in map method를 가지고 있지 않다고 가정하면, compiler는 잠재적인 에러를 감지하고 code를 수정하기 위해서 FunctorOps에 있는 expression을 싼다.

#+BEGIN_SRC scala
new FunctorOps(foo).map(value => value + 1)
#+END_SRC

FunctorOps의 map method는 파라미너로 implicit Functor를 필요로 한다. 이것은 이 코드가 해당 scope에 expr1을 위한 Functor를 가질 때에만 컴파일된다는 것을 의미한다. 만약 Functor가 scope에 없다면, 컴파일 에러가 날 것이다:

#+BEGIN_SRC scala
final case class Box[A](value: A)

val box = Box[Int](123)

box.map(value => value + 1)
// <console>:34: error: value map is not a member of Box[Int]
//        box.map(value => value + 1)
//
#+END_SRC

*** Instances for Custom Types
map method를 정의해서 간단하게 functor를 정의할 수 있다. 아래는 Option을 위한 Functor의 예제이다. 사실 cats.instances에 이미 Option을 위한 Functor가 있지만 말이다. 구현은 사소한 것이다-간단하게 Option의 map method를 호출해보자

#+BEGIN_SRC scala
implicit val optionFunctor: Functor[Option] =
  new Functor[Option] {
    def map[A, B](value: Option[A])(func: A => B): Option[B] = 
      value.map(func)
}
#+END_SRC

때로는 instance에 의존성을 주입해야할 필요도 있따. 예를 들어, 만약 Future를 위한 custom Functor를 정의해야만 한다면 future.map에 implicit ExecutionContext parameter를 필요로 할 수도 있따. functor.map에 추가적인 파라미터를 더 넘길수 없으므로 instance를 생성할 때 의존성을 주입해야 한다:

#+BEGIN_SRC scala
import scala.concurrent.{Future, ExecutionContext}

implicit def futureFunctor(implicit ec: ExecutionContext): Functor[Future] = 
  new Functor[Future] {
    def map[A, B](value: Future[A])(func: A => B): Future[B] =
      value.map(func)
  }
#+END_SRC

Future를 위한 Functor를 소환할 때마다, 바로 Functor.apply를 사용하거나 간접적으로 map 확장 method를 통할수도 있는데, 컴파일러는 implicit resolutiondmfh futureFunctor를 위치시키고 재귀적으로 호출한 쪽에 있는 ExecutionContext를 찾을 것이다. 이는 다음과 같은 확장이다:

#+BEGIN_SRC scala
// We write this:
Functor[Future]

// The compiler expands to this first:
Functor[Future](futureFunctor)

// And then to this:
Functor[Future](futureFunctor(executionContext))
#+END_SRC 

*** Exercise: Branching out with Functors

** Contravariant and Invariant Functors

*** Contravariant Functors and the contramap Method
우리의 첫번째 type class인 contravariant functor는 chain에 operation을 "덧붙일 수 있는" contramap이라는 operation을 제공한다. 일반적인 type signature는 Figure 3.5에서 볼 수 있다.

contramap method는 /transformation/을 표현하는 data type을 위해서만 의미가 있다. 예를 들어, function A => B를 통해 Option[B] backward에 있는 값을 feed할 수 있는 방법은 없다. 하지만, Chapter 1에서 논의했던 대로 Printable type class를 위한 contramap을 정의할 수 있다.

#+BEGIN_SRC scala
trait Printable[A] {
  def format(value: A): String
}
#+END_SRC 

Printable[A]는 A를 String로 transformation한다는 것을 표현한다. Printable[A]의 contramap method는 type B => A의 함수 Func를 받고 새로운 Printable[B]를 생성한다:

#+BEGIN_SRC scala
trait Printable[A] {
  def format(value: A): String
  def contramap[B](func: B => A): Printable[B] =
    ???
}

def format[A](value: A)(implicit p: Printable[A]): String = 
  p.format(value)
#+END_SRC

**** Exercise: Showing off with Contramap 

*** Invariant functors and the /imap/ method
Invariant functors는 map과 contramap을 조합한것과 동일한 정보를 제공하는 imap이라는 method를 구현한다. 만약 map이 chain에 function을 추가함으로써 새로운 type class를 생성한다면, contramap은 새로운 type class instance를 생성해서 chain에 추하고, imap은 이 인스턴스들을 bidirectional transformation의 pair를 통해서 생성할 것이다.

이에 대한 가장 좋은 예는 어떤 data type으로 encoding하고 decoding하는 type class이다. 예를 들면 Play JSON's Format and scodec의 Codec같은 것말이다. String으로부터 혹은 String으로 encoding하고 decoding하는 것을 지원하도록 Printable을 개량함으로써 자체적인 Codec을 생성할 수 있다.

#+BEGIN_SRC scala
trait Codec[A] {
  def encode(value: A): String
  def decode(value: String): A
  def imap[B](dec: A => B, enc: B => A): Codec[B] = ???
}

def encode[A](value: A)(implicit c: Codec[A]): String = 
  c.encode(value)

def decode[A](value: String)(implicit c: Codec[A]): A = 
  c.decode(value)
#+END_SRC

~imap~ 의 type chart는 Figure 3.6에서 볼 수 있다. 만약 ~Codec[A]~ 를 가지고 function A =>B와 B => A의 쌍을 가진다면 ~imap~ method는 ~Codec[B]~ 를 생성한다:

예제 사용 예에서, encode와 decode method가 모두 no-op인 기본적인 ~Codec[String]~ 을 가진다고 상상해보자.

#+BEGIN_SRC scala
implicit val stringCodec: Codec[String] =
  new Codec[String] {
    def encode(value: String): String = value
    def decode(value: String): String = value
  }
#+END_SRC

~imap~ 을 사용하는 ~stringCodec~ 을 만드는 또다른 type을 위한 유용한 ~Codec~을 만들 수 있다:

#+BEGIN_SRC scala
implicit val intCodec: Codec[Int] =
  stringCodec.imap(_.toInt, _.toString)

implicit val booleanCodec: Codec[Boolean] =
  stringCodec.imap(_.toBoolean, _.toString)
#+END_SRC

#+BEGIN_QUOTE
Failure 다루기

~Codec~ type class의 decode method는 failure를 다루지 않는다는 걸 알아두자. 만약 우리가 더욱 정교한 관계를 가지는 모델링을 하고 싶다면, functor뿐만 아니라 /lense/와 /optic/을 살펴보아야 한다.

Optic은 이 책의 범위를 넘어선다. 하지만, Julien Truffaut의 Monocle이라는 라이브러리는 좋은 시작점이 될 것이다. 
#+END_QUOTE

**** Transformative Thinking with imap

#+BEGIN_QUOTE
What's With the Names?

"contravariance", "invariance", "covariance"의 관계는 무엇이고, functor와 다른 점은 무엇일까?

1.6.1에서 variance는 코드의 변경 없이 어떤 타입의 값을 다른 타입의 값으로 변경하기 위해서 필수적인 subtyping에 영향을 준다. 

Subtyping은 conversion으로 보일 수도 있다. 만약 B가 A의 subtype이라면, B는 항상 A로 변환될 수 있따.

이와 같이 function A => B가 존재한다면 B를 A의 subtype이라고 할 수도 있다. standard covariant functor가 정확히 이것을 말한다. 만약 F가 covariant functor라면 F[A]가 있고, A => B의 변환이 있는 곳마다, F[B]로 변환할 수 있다. 

contravariant functor는 정확히 반대상황을 말한다. 만약 F가 contravariant functor이면, F[A]를 가지고 B=>A의 변환이 필요한 곳마다 F[B]로 변환할 수 있다.

결론적으로 invariant functor는 function A => B를 통해서 F[A]에서 F[B]로 변환하고, 혹은 B => A를 이용해 F[B]에서 F[A]로 변환하는 것을 의미한다.     
#+END_QUOTE

** Contravariant and Invariant in Cats
Cats에서 cats.Contravariant와 cats.Invariant type class에 의해서 제공하는 contravariant와 invariant functor를 어떻게 구현하고 있는지 살펴보자. 

여기 간단하게 만든 코드가 있다

#+BEGIN_SRC scala
trait Contravariant[F[_]] {
  def contramap[A,B](fa: F[A])(f: B => A): F[B]
}

trait Invariant[F[_]] {
  def imap[A,B](fa: F[A])(f: A => B)(g: B => A): F[B]
}
#+END_SRC

*** Contravariant in Cats
Contravariant.apply method를 사용하는 Contravariant의 instance를 소환할 수 있다. Cats는 Eq, Show, Function1을 포함하는 parameter를 소비하는 data type의 instance를 제공한다. 여기 예제가 있다

#+BEGIN_SRC scala
import cats.Contravariant
import cats.Show
import cats.instances.string._

val showString = Show[String]

val showSymbol = 
  Contravariant[Show].contramap(showString)((sym: Symbol) =>s"'${sym.name}")

showSymbol.show('dave)
// res2: String = 'dave
#+END_SRC

더 편리하게, contramap 확장 method를 제공하는 cats.syntax.contravariant를 사용할 수도 있다.

#+BEGIN_SRC scala
import cats.syntax.contravariant._ // for contramap

showString.contramap[Symbol](_.name).show('dave)
// res3: String = dave
#+END_SRC

*** Invariant in Cats
다른 type을 위해서, Cats는 ~Monoid~ 를 위한 ~Invariant~ 의 instance를 제공한다. 이는 3.6.2에서 소개한 ~Codec~ 예제와는 조금 다르다. 아래는 ~Monoid~ 의 코드이다

#+BEGIN_SRC scala
package cats

trait Monoid[A] {
  def empty: A
  def combine(x: A, y: A): A
}
#+END_SRC

Scala의 Symbol type을 위한 ~Monoid~ 를 제공하고자 한다고 생각해보자. Cats는 ~Symbol~ 을 위한 ~Monoid~ 를 제공하지 않지만 비슷한 type인 String을 위한 ~Monoid~ 를 제공한다. 빈 ~String~ 을 위한 ~empty~ method와 다음과 같이 동작하는 ~combine~ method를 가지는 새로운 semigroup을 만들 수 있다.

1. 두 개의 ~Symbol~ 을 파라미터로 받는다.
2. ~Symbol~ 을 ~String~ 으로 변환한다
3. ~Monoid[String]~ 을 사용해서 ~String~ 을 combine한다.
4. result를 다시 ~Symbol~ 로 변환한다

~String~ => ~Symbol~ 과 ~Symbol~ => ~String~ type의 함수를 파라미터로 받는 ~imap~ 을 사용하는 ~combine~ 을 구현해보자. 여기에 ~cats.syntax.invariant~ 가 제공하는 ~imap~ 확장 method를 이용해서 작성한 코드가 있다.

#+BEGIN_SRC scala
import cats.Monoid
import cats.instances.string._ // for Monoid
import cats.syntax.invariant._ // for imap
import cats.syntax.semigroup._ // for |+|

implicit val symbolMonoid: Monoid[Symbol] = 
  Monoid[String].imap(Symbol.apply)(_.name)

Monoid[Symbol].empty
// res5: Symbol = '

'a |+| 'few |+| 'words
// res6: Symbol = 'afewwords
#+END_SRC

** Aside: Partial Unification
3.2에서 재미있는 compiler error를 살펴봤다. 다음의 코드는 -Ypartial-unification compiler flag를 enable했을 때 제대로 컴파일된다. 

#+BEGIN_SRC scala
import cats.Functor
import cats.instances.function._ // for Functor
import cats.syntax.functor._     // for map

val func1 = (x: Int)    => x.toDouble
val func2 = (y: Double) => y * 2

val func3 = func1.map(func2)
// func3: Int => Double = scala.runtime.AbstractFunction1$$Lambda$23131769218156@6b5ae8b2
#+END_SRC

하지만 flag가 없으면 실패한다.

#+BEGIN_SRC scala
val func3 = func1.map(func2)
// <console>: error: value map is not a member of Int => Double 
// val func3 = func1.map(func2)
#+END_SRC

확실히 "partial unification"은 부가적인 compile 행동이다. 이 행동에 대해서 알아보고 몇몇 사용예를 논의해보자

*** Unifying Type Constructors
위의 ~func1.map(func2)~ 와 같은 expression을 컴파일하기 위해서, compiler는 ~Function1~ 을 위한 ~Functor~ 를 찾아야만 한다. 하지만, ~Functor~ 는 하나의 parameter를 가지는 type constructor를 받는다:

#+BEGIN_SRC scala
trait Functor[F[_]] {
  def map[A, B](fa: F[A])(func: A => B): F[B]
}
#+END_SRC

그리고 ~Function1~ 은 두가지 type parameter를 가진다(function argument와 result type)

#+BEGIN_SRC scala
trait Function1[-A, +B] {
  def apply(arg: A): B
}
#+END_SRC

compiler는 ~Functor~ 에게 넘길 올바른 종류의 type constructor를 생성하기 위해서 ~Function1~ 의 두 가지 parameter 중 하나를 고쳐야만 한다. 두 가지 조건이 있다

#+BEGIN_SRC scala
type F[A] = Int => A
type F[A] = A => Double
#+END_SRC

이러한 것들의 형식은 올바른 선택이다. 하지만, Scala compiler의 이전 버전은 이런 추론을 할 수 없었다. 이 유명하지 않은 제약사항은 SI-2712인데, compiler가 다른 arity를 가지는 type constructor의 "unifying" 을 막았다. 이 컴파일러 제약사항은 이제 고쳐졌지만 ~build.sbt~ 의 compiler flag를 통해서만 enable해야 한다.

#+BEGIN_SRC scala
scalacOptions += "-Ypartial-unification"
#+END_SRC

*** Left-to-Right Elimination

Scala compiler의 partial unification은 왼쪽에서 오른쪽으로 type parameter를 수정하면서 동작한다. 위의 예제에서, compiler는 ~Int => Double~ 에 있는 ~Int~ 를 수정하고 type ~Int => ?~ 의 function을 위한 ~Functor~ 를 찾는다.

#+BEGIN_SRC scala
type F[A] = Int => A

val functor = Functor[F]
#+END_SRC

이 left-to-right 제거는 ~Function1~ 과 ~Either~ 와 같은 type을 위한 ~Functor~ 를 포함한 다양한 일반적인 시나리오에서 동작할 수 있다.

#+BEGIN_SRC scala
import cats.instances.either._ // for Functor

val either: Either[String, Int] = Right(123)
// either: Either[String,Int] = Right(123)

either.map(_ + 1)
// res2: scala.util.Either[String,Int] = Right(124)
#+END_SRC

하지만, left-to-right 제거가 올바르지 않은 선택이 되지 않을 상황도 있다. 예를 들면 습관적으로 left-biase된 ~Either~ 의 equivalent인 Scalatic에서의 ~Or~ type이 그 예이다:

#+BEGIN_SRC scala
type PossibleResult = ActualResult Or Error
#+END_SRC

또 하나의 예는 ~Function1~을 위한 ~Contravariant~ functor이다.

~Function1~ 을 위한 covariant ~Functor~ 가 ~andThen~-style left-to-right function composition을 구현하다면 ~Contravariant~ functor는 ~compose-style~ right-to-left composition을 구현한다. 다시 말해 다음의 expression은 동일하다:

#+BEGIN_SRC scala
val func3a: Int => Double =
  a => func2(func1(a))

val func3b: Int => Double =
  func2.compose(func1)

// Hypothetical example. This won't actually compile:
val func3c: Int => Double =
  func2.contramap(func1)
#+END_SRC

만약 실제로 이를 수행한다면, 코드는 컴파일되지 않을 것이다.

#+BEGIN_SRC scala
import cats.syntax.contravariant._ // for contramap 

val func3c = func2.contramap(func1)
// <console>:27: error: value contramap is not a member of Double => Double
// val func3c = func2.contramap(func1) //
#+END_SRC

여기서 문제는 ~Function1~ 을 위한 ~Contravariant~ 는 Fiture 3.7에서와 같이 오른쪽에서 왼쪽으로 type parameter를 제거하기 위해서 return type을 수정하고 compiler가 요구하는 parameter type을 남긴다.

#+BEGIN_SRC scala
type F[A] = A => Double
#+END_SRC

compiler는 left-to-right bias때문에 간단히 실패한다. Function1의 parameter를 flip하는 type을 생성함으로써 이를 증명할 수 있다.

#+BEGIN_SRC scala
type <=[B, A] = A => B

type F[A] = Double <= A
#+END_SRC

만약 <=의 instance로서 func2를 re-type하면 elimination의 요구되는 순서를 reset하고 요구되는 ~contramap~ 을 호출할 수 있다.

#+BEGIN_SRC scala
val func2b: Double <= Double = func2

val func3c = func2b.contramap(func1)
// func3c: Double <= Int = scala.runtime.AbstractFunction1$$Lambda$2313/1769218156@656e1369
#+END_SRC

func2와 func2b의 다른점은 순전히 syntatic이다 둘 다 같은 값을 참고하고 type alias는 완벽하게 compatible하다. 놀랍게도 이 간단한 rephrasing은 충분히 compiler에게 문제를 풀기 위해 필요한 힌트를 제공한다.

이런 종류의 right-to-left elminination을 필요로 하는 것은 드물다. 대부분의 multi-parameter type constructor는 right-biased로 디자인되었고 compiler의 의해서 지원되는 left-to-right elimination이 필요한 것은 out of box이다. 하지만 ~Ypartial-unification~ 과 elemination 순서의 quirk를 아는 것은 유용하다. 

** Summary
Functor는 sequencing behaviour를 나타낸다. 이 챕터에서 functor의 세가지 타입을 살펴보았다.

- ~map~ method를 가지는 일반적인 covariant ~Functor~ 는 몇몇 context에서 값에 function을 적용하도록 한다. ~map~ 의 성공적인 호출은 이 function들이 predecessor의 결과를 파라미터로 받아들이면서 순서대로 처리되게 한다.

- ~contramap~ method를 가지는 ~Contravariant~ functor는 function들을 function-like context로 "prepend"하는 것을 보여준다. ~map~ 의 반대 순서에서 ~contramap~ 의 성공적인 호출은 이 function들을 순서대로 처리하게 한다.

- ~imap~ method를 가지는 ~Invariant~ functor는 bidirectional transformation을 표현한다.

일반적인 ~Functor~ 는 이 type class의 가장 일반적인 것들이지만, 그 자체로 사용되는 것은 드물다. Functor는 우리가 항상 사용하는 흥미로운 추상의 block을 구축할 수 있도록 한다. 다음의 chapter에서는 이러한 abstraction의 두 가지를 살펴볼 것이다 ~Monad~ 와 ~applicative~ functor 말이다

collection을 위한 ~Functor~ 는 매우 중요하다. 이 Functor는 각 element를 독립적으로 변환할 수 있다. 이러한 기능은 큰 collection에서 병렬 혹은 분산된 transformation을 가능하게 해준다. Hadoop과 같은 "map-resuce" framework에서 많이 사용되는 기술이다. 이 책의 뒷부분에서 Map-reduce cas study에서 좀 더 자세히 살펴보겠다. ~Contravariant~와 ~Invariant~ type class는 좀 덜 넓게 적용가능하지만 여전히 transformation을 표현하는 data type을 구축하는 데는 유용하다. Chapter 6에서 ~Semigroupal~ type class를 논의할 때 다시 살펴보자.


