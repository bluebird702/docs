#+STARTUP: showall
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage{kotex}
#+LATEX_HEADER: \usepackage{CJKutf8}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage[scale=0.75,twoside,bindingoffset=5mm]{geometry}
#+LATEX_HEADER: \usepackage[onehalfspacing]{setspace}
#+LATEX_HEADER: \usepackage{longtable}
#+AUTHOR: billy.angels
#+TITLE: Scala with Cats


* Introduction

Cats는 다양한 함수형 프로그래밍 도구들을 포함하고 있고, 개발자들이 원하는 도구를 선택해서 쓸 수 있도록 해준다. 이 도구들의 대부분은 이미 존재하는 Scala type에 적용이 가능한 type class의 형태로 제공된다.

Type class들은 Haskell에서 시작된 프로그래밍 패턴이다. Type class들은 이미 개발된 라이브러리들이 전통적으로 사용되는 상속이나, 기존 라이브러리 소스코드의 변경 없이 새로운 기능을 확장할 수 있게 해준다.

이 챕터에서는 Underscore의 Essential Scala 책에 있는 type class에 대해서 다시 한번 살펴보고 Cats codebase를 처음으로 살펴볼 것이다. 우리는 Show와 Eq, 두 개의 type class 예제를 통해서 이 책이 기본적으로 의지하는 패턴들을 식별할 것이다.

우리는 type class를 다시 Scala의 함수형 프로그래밍에 대한 구조적인 접근을 대표하는 algebric data type, pattern maching, value classes, type alias와 엮으면서 마무리할 것이다

** Anatomy of a Type Class

type class 패턴에서는 세가지 중요한 컴포넌트가 있다. 그것은 /type/ class 그 자체, 특정 type의 /instance/, 그리고 사용자에게 노출할 /interface/ method들이다.

*** The Type Class

/type class/ 는 우리가 구현하고자 하는 기능을 표현한 API 혹은 interface이다. Cats에서 type class는 최소한 하나의 type parameter를 가지는 trait으로 표현된다. 예를 들어, "JSON을 serialize한다"라는 generic한 행동을 다음과 같이 표현할 수 있다.

#+BEGIN_SRC scala
// Define a very simple JSON AST
sealed trait Json
final case class JsObject(get: Map[String, Json]) extends Json 
final case class JsString(get: String) extends Json
final case class JsNumber(get: Double) extends Json
case object JsNull extends Json

// The "serialize to JSON" behaviour is encoded in this trait
trait JsonWriter[A] {
  def write(value: A): Json
}
#+END_SRC

JsonWriter는 이 예제에서 Json과 그 subtype을 가진 우리의 type class이다. 

*** Type Class Instances

type class의 /instance/ 는 우리가 다루어야 하는 type을 위한 구현을 제공한다. 우리가 다루어야 하는 type은 Scala standara library의 type들과 우리의 도메인 모델에 있는 type을 포함한다.

Scala에서 우리는 type class의 concrete implementation을 만들고 이에 implicit keyword를 tag함으로써 instance를 정의한다.

#+BEGIN_SRC scala
final case class Person(name: String, email: String)

object JsonWriterInstances {
  implicit val stringWriter: JsonWriter[String] = 
    new JsonWriter[String] {
      def write(value: String): Json = JsString(value)
    }

  implicit val personWriter: JsonWriter[Person] = 
    new JsonWriter[Person] {
      def write(value: Person): Json = 
        JsObject(Map(
	  "name" -> JsString(value.name),
	  "email" -> JsString(value.email)
	))
    }
}
#+END_SRC

*** Type Class Interfaces

type class /interface/는 우리가 사용자들에게 노출하고 하는 기능이다. Interface들은 implicit parameter로 type class의 instance를 받을 수 있는 generic method들이다.

interface의 정의는 두가지 방법이 있다: /Interface Objects/와 /Interface Syntax/이다

*Interface Objects*
interface를 생성하는 가장 간단한 방법은 method를 singleton object에 두는 것이다. 

#+BEGIN_SRC scala
object Json {
  def toJson[A](value: A)(implicit w: JsonWriter[A]): Json =
    w.write(value)
}
#+END_SRC

이 object를 사용하기 위해서, 우리가 다루는 어떤 type class instance로든지 import해서 관련 method를 호출할 수 있다.

#+BEGIN_SRC scala
import JsonWriterInstances._
Json.toJson(Person("Dave", "dave@example.com"))
// res4: Json = JsObject(Map(name -> JsString(Dave), email -> JsString
     (dave@example.com)))
#+END_SRC

complier는 implicit parameter를 제공하지 않고 toJson method를 호출하는 지점을 잡아낸다. 그리고 compiler는 이를 고치기 위해서 관련 type의 type class instance를 찾고 이를 call하는 쪽에다가 집어넣는다

#+BEGIN_SRC scala
Json.toJson(Person("Dave", "dave@example.com"))(personWriter)
#+END_SRC

*Interface Syntax*
우리는 이미 interface method를 가지고 존재하는 type을 확장하기 위해서 /extension method/를 대신 사용할 수도 있다. Cats는 이를 type class를 위한 "/syntax/"라고 한다.

#+BEGIN_SRC scala
object JsonSyntax {
  implicit class JsonWriterOps[A](value: A) {
    def toJson(implicit w: JsonWriter[A]): Json =
      w.write(value)
} }
#+END_SRC 

우리는 우리가 필요로 하는 type의 instanced와 함께 importing하기 위해서 interface syntax를 사용한다.

#+BEGIN_SRC scala
import JsonWriterInstances._
import JsonSyntax._

Person("Dave", "dave@example.com").toJson
// res6: Json = JsObject(Map(name -> JsString(Dave), email -> JsString
     (dave@example.com)))
#+END_SRC

다시, compiler는 implicit parameter의 후보를 찾아서 집어넣어준다.

#+BEGIN_SRC scala
Person("Dave", "dave@example.com").toJson(personWriter)
#+END_SRC

The /*implicitly*/ Method

Scala standard library는 implicitly라고 하는 generic type class interface를 제공한다. implicitly의 정의는 매우 간단하다

#+BEGIN_SRC scala
 def implicitly[A](implicit value: A): A =
  value
#+END_SRC

우리는 implicitly를 사용해서 implicit scope에 있는 어떤 value라도 소환할 수 있다. 우리가 원하는 type을 제공하면 implicitly가 나머지는 알아서 한다.

#+BEGIN_SRC scala
import JsonWriterInstances._
// import JsonWriterInstances._
implicitly[JsonWriter[String]]
// res8: JsonWriter[String] = JsonWriterInstances$$anon$1@73eb1c7a
#+END_SRC

Cats에 있는 대부분의 type class들은 instance를 소환하기 위해 implicitly가 아닌 다른 방법으로 제공한다. 하지만 implicitly는 디버깅을 위해서는 좋은 fallback이다. 우리는 compiler가 type class의 instance를 찾는 걸 보장하기 위해서 우리 코드의 일반적인 흐름안에서 implicitly 호출을 추가함으로써 모호한 implicit error가 없는 걸 보장할 수 있다.

** Working with Implicits
Scala에서 type class로 작업한다는 것은 implicit value와 implicit parameter와 함께 작업한다는 것을 의미한다. 이를 효과적으로 하기 위해서는 알아야할 몇가지 규칙이 있다.

*** Packaging Implicits
언어의 별난점인데, Scala에서 implicit으로 설정된 어떤 정의도 최상단이 아니라 object나 trait 안쪽에 위치해야만 한다. 위의 예제에서, 우리는 JsonWriterInstances라는 object에 있는 type class instance를 패키징했다. 우리는 companion object에 있는 type class들을 JsonWriter에 똑같이 위치시킬 수 있다. companion object에 있는 instance들을 type class에 두는 것은 Scala에서 중요한 의미를 지니는데 그 이유는 /implicit scope/라고 불리는 무언가를 그안에 넣기 때문이다. 

*** Implicit Scope
우리가 위에서 봤듯이, compiler는 type에 의한 type class instance 후보들을 찾는다. 예를 들어, 다음의 expression에서 컴파일러는 JsonWriter[String] type의 instance를 찾을 것이다.

#+BEGIN_SRC scala
Json.toJson("A string!")
#+END_SRC

compiler는 호출하는 부분의 implicit scope에 있는 후보 instance들을 찾는다.

- local or inherited definitions;
- import된 defitions;
- type class 혹은 parameter type(이 경우에는 JsonWriter 혹은 String)의 companion object에 있는 definition

Definition들은 만약 implicit keyword에 tag되면 implicit scope에만 포함된다. 그러므로, 만약 compiler가 여러개의 후보 definition을 본다면, compiler는 /ambigous implicit values/ error와 같이 실패할 것이다.

#+BEGIN_SRC scala
implicit val writer1: JsonWriter[String] =
  JsonWriterInstances.stringWriter

implicit val writer2: JsonWriter[String] =
  JsonWriterInstances.stringWriter

Json.toJson("A string")
// <console>:23: error: ambiguous implicit values:
// both value stringWriter in object JsonWriterInstances of type =>
     JsonWriter[String]
//  and value writer1 of type => JsonWriter[String]
// match expected type JsonWriter[String] // Json.toJson("A string")
//
#+END_SRC

implicit resolution의 간결한 규칙은 이것보다 더 복잡하지만, 이러한 복잡성은 이 책과는 크게 연관이 없다. 우리의 목적을 위해서, 우리는 네가지 방법으로 type class instance를 패키징할 수 있다.

- JsonWriterInstances와 같은 object에 type class를 위치시킨다
- trait에 type class를 위치시킨다
- type class의 companion에 type class를 위치시킨다
- parameter type의 companion object를 위치시킨다

option 1에서 우리는 type class를 import함으로써 instance를 scope에 포함시킨다.option 2는 상속의 scope로 type class를 가져온다. option 3과 option 4에서, 우리가 쓰던 안쓰던 instance는 항상 implicit scope에 있다 

*** Recursive Implicit Resolution

type class와 implicit의 힘은 후보 instance들 찾을 때 implicit definition을 조합하는 컴파일러의 능력에 의존한다.

모든 type class instance들은 implicit vals이다. 이것은 간단하다. 우리는 두가지 방법으로 instance를 정의할 수 있다.

- 요구되는 type을 implicit vals로서 concreate instance들을 정의해서
- 다른 type class instance로부터 instance를 만드는 implicit method를 정의해서

왜 우리는 다른 instance로부터 instance를 만들어낼까? Options를 위한 JsonWriter를 정의하는 것을 고려해보자. 우리는 애플리케이션에서 다루어야 하는 모든 A를 위한 JsonWriter[Option[A]]가 필요하다. 우리는 implicit vals의 라이브러리를 생성함으로써 문제를 하나하나 모두 시도해볼수도 있다.

#+BEGIN_SRC scala
implicit val optionIntWriter: JsonWriter[Option[Int]] = ???
implicit val optionPersonWriter: JsonWriter[Option[Person]] = ???
// and so on...
#+END_SRC
 
하지만, 이 접근은 확실하게 확장을 하기가 어렵다. 우리는 애플리케이션의 모든 A type을 위한 두 개 의 implicit vals를 필요로 한다: 하나는 A를 위한 것과 하나는 Option[A]를 위한것이다.

운 좋게도, 우리는 Option[A]를 다루는 code를 A를 위한 instance에 기반한 공통의 생성자로 추상화할 수 있다.

- 만약 option이 Some(aValue)라면, A를 위한 writer를 사용해서 aValue를 쓴다
- 만약 option이 None이라면, null을 쓴다

여기 implicit def로 작성한 같은 코드가 있다

#+BEGIN_SRC scala
implicit def optionWriter[A]
(implicit writer: JsonWriter[A]): JsonWriter[Option[A]] =
  new JsonWriter[Option[A]] {
    def write(option: Option[A]): Json =
      option match {
        case Some(aValue) => writer.write(aValue)
        case None         => JsNull
} }
#+END_SRC

이 메소드는 A-specific 기능을 채우기 위한 implicit parameter에 의존한 Option[A]를 위한 JsonWriter를 만들어낸다. compiler가 보는 expression은 다음과 같다

#+BEGIN_SRC scala
Json.toJson(Option("A string"))
#+END_SRC

copiler는 implicit JsonWriter[Option[String]]을 찾는다. 그리고 JsonWriter[Option[A]]를 위한 implicit method를 찾게 된다.

#+BEGIN_SRC scala
Json.toJson(Option("A string"))(optionWriter[String])
#+END_SRC

그리고 recursive하게 optionWriter의 parameter로 사용하기 위해서 JsonWriter[String]를 찾아낸다

#+BEGIN_SRC scala
Json.toJson(Option("A string"))(optionWriter(stringWriter))
#+END_SRC

이러한 경우, implicit resolution은 정확한 모든 type의 type class을 소환하는 조합을 찾기 위해서 implicit definition의 가능한 조합을 모두 찾게 된다

#+BEGIN_SRC 
Implicit Conversions

implicit def를 사용하는 type class instance constructor를 생성할 때, implicit parameters로서 parameter를 method에 전달하는 것을 보장해야 한다. 이 keyword가 없다면, compiler는 implicit 처리 시에 parameter들을 채울 수 없을 것이다.

non-implicit parameter와 같이 있는 implicit method는 implicit conversion이라고 불리는 다른 scala pattern을 만들어낸다. implicit conversion은 현대의 scala code에서 얼굴을 찌푸리게 하는 오래된 programming pattern이다. 운 좋게도, compiler는 이렇게 사용하려고 하면 경고할 것이다. scala.language.implicitConversions를 import하면 implicit conversion을 수동으로 사용가능하게 할 수 있다.

#+END_SRC

#+BEGIN_SRC scala
implicit def optionWriter[A]
(writer: JsonWriter[A]): JsonWriter[Option[A]] =
???
// <console>:18: warning: implicit conversion method optionWriter should be enabled
// by making the implicit value scala.language.
     implicitConversions visible.
// This can be achieved by adding the import clause 'import scala.language.implicitConversions'
// or by setting the compiler option -language:
     implicitConversions.
// See the Scaladoc for value scala.language.implicitConversions for a discussion
// why the feature should be explicitly enabled.
// // //
       implicit def optionWriter[A]
                    ^
error: No warnings can be incurred under -Xfatal-warnings.
#+END_SRC


** Exercise: Printable Library

생략

** Meet Cats
이전 섹션에서 Scala에서 어떻게 type class를 구현하는지 봤다. 이 섹션에서는 Cats에서 어떻게 type class를 구현하는지 볼 것이다. 

Cats는 우리가 원하는 대로 사용할 수 있는 어떤 type class, instance, interface method든 선택할 수 있게 해주는 modular 구조를 사용해서 작성되었다. 첫번째로 cats.Show를 사용한 예제를 살펴보자

Show는 이전 섹션에서 정의한 Printable type class의 Cats 버전이다. Show는 toString을 사용하지 않고 개발자 친화적인 console output을 위한 매커니즘을 제공한다. 다음은 생략된 definition이다

#+BEGIN_SRC scala
package cats

trait Show[A] {
  def show(value: A): String
}
#+END_SRC

*** Importing Type Classes
Cats에서 type class들은 cats package에 정의된다. 이 패키지로부터 바로 Show를 import할 수 있다

#+BEGIN_SRC scala
import cats.Show
#+END_SRC

모든 Cats의 companion object는 우리가 정의하는 어떤 type의 instance도 가지고 있는 apply method를 가지고 있다:
#+BEGIN_SRC scala
val showInt = Show.apply[Int]
// <console>:13: error: could not find implicit value for parameter
instance: cats.Show[Int]
// val showInt = Show.apply[Int] //
#+END_SRC

Oops - 동작하지 않는군요! apply method는 각각의 instance들을 찾기 위해 /implicit/을 사용한다. 그래서 몇몇 instance들을 scope로 가져올 것이다

*** Importing Default Instances
cats.instances package는 넓은 범위의 type을 위해 default instance를 제공한다. 다음의 table에서 보여지는 것들을 import할 수 있다. 각 import는 특정 parameter type을 위한 모든 Cats't type class들의 instance를 제공한다

- cats.instances.int는 Int를 위한 instance를 제공한다.
- cats.instances.string는 String을 위한 instance를 제공한다.
- cats.instances.list는 List를 위한 instance를 제공한다
- cats.instances.option은 Option을 위한 instance를 제공한다.
- cats.instances.all은 Cats와 함께 포함된 모든 instance를 제공한다.

cats.instances package는 가능한 import의 완벽한 목록을 참고해라

Int와 String을 위한 Show의 instance를 import해보자

#+BEGIN_SRC scala
import cats.instances.int._    // for Show
import cats.instances.string._ // for Show

val showInt: Show[Int] = Show.apply[Int] 
val showString: Show[String] = Show.apply[String]
#+END_SRC

더 나아진 것 같다! Show의 두 instance에 접근할 수 있으며 Ints와 Strings를 출력하기 위해서 이들을 사용할 수 있다:

#+BEGIN_SRC scala
val intAsString: String =
  showInt.show(123)
// intAsString: String = 123
val stringAsString: String =
  showString.show("abc")
// stringAsString: String = abc
#+END_SRC

*** Importing Interface Syntax
우리는 cats.syntax.show로부터 interface syntax를 import해서 Show를 더 편하게 사용할 수 있도록 할 수 있다. cats.syntax.show는 모든 타입을 위한 show라고 불리는 extension method를 추가한다

#+BEGIN_SRC scala
import cats.syntax.show._ // for show
val shownInt = 123.show
// shownInt: String = 123
val shownString = "abc".show
// shownString: String = abc
#+END_SRC 

Cats는 각 type class를 위한 분리된 syntax import를 제공한다. 이후에 섹션과 챕터에서 이러한 것들을 소개하겠다.

*** Importing All The Things!
이 책에서 우리는 각 예제에서 필요로 하는 instance와 syntax를 정확히 보여주기 위해서 정확한 import를 사용할 것이다. 하지만, 이런 방식은 많은 경우 시간이 들 수 있다. import를 간단하게 하기 위한 다음의 shortcut 중 하나를 편하게 사용해도 된다.

- import cats._는 Cats의 type class를 모두 import한다.
- import cats.instance.all._는 standard library르 위한 type class instance 모두를 import한다
- import cats.syntax.all._는 syntax 모두를 import한다
- import cats.implicits._는 모든 syntax와 standard type class instance 모두를 import한다

대부분의 사람들이 다음의 import로 파일을 시작한다. 이 import는 이름 충돌이나 모호한 implicit 문제가 있을 때에만 더 구체적인 import로 돌릴 수 있다. 

#+BEGIN_SRC scala
import cats._
import cats.implicits._
#+END_SRC 

*** Defining Custom Instances
주어진 type을 위한 trait을 구현하는 것에 의해서 간단히 Show의 instance를 정의할 수 있다.

#+BEGIN_SRC scala
import java.util.Date
implicit val dateShow: Show[Date] =
  new Show[Date] {
    def show(date: Date): String =
      s"${date.getTime}ms since the epoch."
}
#+END_SRC

하지만, Cats는 프로세스를 간단하게 하는 편리한 method들을 제공한다. 자체적인 type을 위한 instance를 정의하기 위해서 사용하는 Show의 companion object에 있는 두가지 construction method가 있다. 

#+BEGIN_SRC scala
object Show {
  // Convert a function to a `Show` instance:
  def show[A](f: A => String): Show[A] =
  ???
  // Create a `Show` instance from a `toString` method:
  def fromToString[A]: Show[A] =
  ???
}
#+END_SRC

이러한 것들은 바닥부터 이를 정의하는 것보다 훨씬 더 적은 노력으로 빠르게 instance를 생성할 수 있도록 한다.

#+BEGIN_SRC scala
implicit val dateShow: Show[Date] =
Show.show(date => s"${date.getTime}ms since the epoch.")
#+END_SRC

보다시피, construction method를 사용하는 code는 code가 거의 없을 정도록 훨씬 간결하다. Cats에 있는 많은 type class는 instance를 생성할 수 있는 이런 helper method를 제공하며 이 method들은 바닥부터 하거나 혹은 이미 존재하는 instance를 다른 type으로 transform할 수 있게 한다.

*** Exercise: Cat Show
생략

** Example: Eq
또다른 유용한 type class를 살펴보고 이 챕터를 마무리하겠다. 바로 cats.Eq이다. Eq는 type-safe equality를 지원하고 Scala의 built-in == 연산자를 사용할 때 짜증나는 부분에 집중한다. 

대부분 모든 Scala 개발자는 이전에는 다음과 같이 코드를 작성했다.

#+BEGIN_SRC scala
 List(1, 2, 3).map(Option(_)).filter(item => item == 1)
// res0: List[Option[Int]] = List()
#+END_SRC

좋다, 많은 사람들은 다음과 같은 실수를 하지 않을 수 있지만, 그 원칙은 타당하다. filter clause의 predicate는 항상 false를 리턴한다. 왜냐하면 Int와 Option[Int]를 비교하기 때문이다.

이것은 프로그래머 에러이다 - item을 1 대신에 Some(1)과 비교해야만 한다. 하지만, 이건 기술적으로 type error가 아니다. 왜냐하면 ==는 우리가 비교하는 어떤 type이든 어떤 객체와든 동작해야 하기 때문이다. Eq는 equality check와 이 문제를 잘 동작하게 하기 위해서 몇가지 type safety를 추가하기 위해 설계되었다.

*** Equality, Liberty, and Fraternity
우리는 Eq를 모든 주어진 type간의 type-safe equality를 정의하기 위해서 사용할 수 있다.

#+BEGIN_SRC scala
package cats
trait Eq[A] {
  def eqv(a: A, b: A): Boolean
  // other concrete methods based on eqv...
}
#+END_SRC

cats.syntax.eq에 정의된 interface syntax는 해당 scope에 있는 Eq[A] instance의 quality check를 위한 두가지 method를 제공한다.

- ===는 두 개의 object를 비교한다
- =!=는 두 개의 object가 다른지를 비교한다

*** Comparing Ints
몇가지 예를 살펴보자. 우선 type class를 import해보자

#+BEGIN_SRC scala
import cats.Eq
#+END_SRC

이제 Int인 instance를 설정해보자

#+BEGIN_SRC scala
import cats.instances.int._ // for Eq

val eqInt = Eq[Int]
#+END_SRC

이제 eqInt를 이용해서 바로 equality를 테스트할 수 있다.

#+BEGIN_SRC scala
eqInt.eqv(123, 123)
// res2: Boolean = true
eqInt.eqv(123, 234)
// res3: Boolean = false
#+END_SRC

Scala의 == method와 다르게, 만약 eqv를 사용해서 서로 다른 type의 object를 비교하려고 하면 compile error를 보게 된다

#+BEGIN_SRC scala
eqInt.eqv(123, "234")
// <console>:18: error: type mismatch; // found : String("234")
// required: Int
// eqInt.eqv(123, "234")
//
#+END_SRC

또한 ===와 =!= method를 사용하기 위해 cats.syntax.eq에 있는 interface syntax를 import해보자

#+BEGIN_SRC scala
import cats.syntax.eq._ // for === and =!=

123 === 123
// res5: Boolean = true
123 =!= 234
// res6: Boolean = true
#+END_SRC

다시, 서로 다른 type의 값을 비교하면 compile error가 발생한다

*** Comparing Options
자..이제 더욱 재미있는 예제르 살펴보자. 바로 Option[Int]이다. Option[Int]인 type의 값을 비교하기 위해서 우리는 Int뿐만 아니라 Option을 위한 Eq의 instance도 import해보자

Int:
#+BEGIN_SRC scala
import cats.instances.int._    // for Eq
import cats.instances.option._ // for Eq
#+END_SRC

이제 몇가지 비교를 해보자

#+BEGIN_SRC scala
Some(1) === None
// <console>:26: error: value === is not a member of Some[Int] // Some(1) === None
//
#+END_SRC

type이 맞지 않기 때문에 error를 받았다. Int와 Option[Int]의 Eq instance들이 있지만, 비교하는 값들은 Some[Int] type의 값이다. 이 문제를 해결하기 위해서 Option[Int]로서의 argument를 다시 작성해야 한다

#+BEGIN_SRC scala
(Some(1) : Option[Int]) === (None : Option[Int])
// res9: Boolean = false
#+END_SRC

standard library에 있는 Option.apply와 Option.empty를 이용해서 좀 더 친숙한 방식으로 할 수 있다

#+BEGIN_SRC scala
Option(1) === Option.empty[Int]
// res10: Boolean = false
#+END_SRC

혹은 cats.syntax.option에 있는 특별한 syntax를 사용할 수도 있다

#+BEGIN_SRC scala
import cats.syntax.option._ // for some and none
1.some === none[Int]
// res11: Boolean = false
1.some =!= none[Int]
// res12: Boolean = true
#+END_SRC

*** Comparing Custom Types
Eq를 이용해서 Eq의 instance를 정의할수도 있다. (A,A) => Boolean type의 함수를 받아서 Eq[A]를 리턴하는 걸 정의해보자:

#+BEGIN_SRC scala
import java.util.Date
import cats.instances.long._ // for Eq

implicit val dateEq: Eq[Date] =
  Eq.instance[Date] { (date1, date2) =>
    date1.getTime === date2.getTime
  }

val x = new Date() // now
val y = new Date() // a bit later than now

x === x
// res13: Boolean = true

x === y
// res14: Boolean = false
#+END_SRC

*** Exercise: Equality, Liberty, and Felinity
생략

** Controlling Instance Selection
type class를 사용할 때에는 instance를 선택하는 데 있어 두가지 이슈를 고려해야만 한다

- type에 정의된 instance와 subtype간의 관계는 어떻게 되는가?
예를 들어 만약 우리가 JsonWriter[Option[Int]]를 정의했다면, Json.toJson(Some(1))은 이 instance를 선택할 것인가(Some은 Option의 subtype이라는 것을 기억하자)
- 많은 type class instance들이 있을 때 어떻게 선택할 것인가?
만약 Person을 위한 JsonWriter가 두개라면? Json.toJson(aPerson)이라는 코드는 어떤 instance를 선택할 것인가??

*** Variance
type class를 정의할 때에는, implicit을 찾는 동안 instance를 선택하게 하기 위해 type class의 variance와 compiler의 능력의 영향을 미치는 type parameter에 variance annotation을 추가할 수 있다. 

Essential Scala를 다시 돌아보면, variance는 subtype과 관련되어 있다. 만약 type A의 값이 기대되는 어떤 곳에도 type B의 값을 사용할 수 있다면 B는 A의 subtype이라고 할 수 있다.

Co-와 contravariance annotation은 type constructor와 함께 동작할 때 발생한다. 예를 들어, covariance는 + 기호와 함께 표시할 수 있다.

#+BEGIN_SRC scala
trait F[+A] // the "+" means "covariant"
#+END_SRC

*Covariance*
Covariance는 B가 A의 subtype이면 F[B]는 F[A] type의 subtype을 의미한다. 이는 List와 Option과 같은 collection을 포함한 많은 type을 모델링할 때 유용하다:

#+BEGIN_SRC scala
trait List[+A]
trait Option[+A]
#+END_SRC

Scala collection의 covariance는 하나의 type으로 구성된 collection에서 다른 type의 collection으로 교체할 수 있게 한다. 예를 들어, Circle은 Shape의 subtyp이기 때문에 List[Shape]가 들어가야하는 어떤 곳에도 List[Circle]을 사용할 수 있다.

#+BEGIN_SRC scala
sealed trait Shape
case class Circle(radius: Double) extends Shape

val circles: List[Circle] = ???
val shapes: List[Shape] = circles
#+END_SRC

contravariance는 어떤가? 다음과 같이 -기호를 가진 type constructor로 contrvariant를 작성할 수 있다.

#+BEGIN_SRC scala
trait F[-A]
#+END_SRC

*Contravariance*
혼란스럽게도, contravariance는 만약 A가 B의 subtype이면 F[B]가 F[A]의 subtype이라는 것을 의미한다. contravariance는 위에서 언급한 JsonWriter type class같은 프로세스를 표현하는 type을 모델링하기에 유용하다:

#+BEGIN_SRC scala
trait JsonWriter[-A] {
  def write(value: A): Json
}
// defined trait JsonWriter
#+END_SRC

좀 더 풀어보자. variance는 하나의 값을 다른 값으로 변환하는 것에 대한 것이라는 것을 기억하자.  Shape type과 Circle type 두 가지 값과 Shape와 Circla을 위한 두개의 JsonWirter를 가지는 시나리오를 고려하자:

#+BEGIN_SRC scala
val shape: Shape = ???
val circle: Circle = ???

val shapeWriter: JsonWriter[Shape] = ???
val circleWriter: JsonWriter[Circle] = ???

def format[A](value: A, writer: JsonWriter[A]): Json = writer.write(value)
#+END_SRC

이제 스스로에게 물어보자: "format에 어떤 값과 JsonWriter의 조합을 보낼것인가?" 우리는 둘 중 어떤 writer든지 circle과 조합할 수 있다. 왜냐하면 모든 Circle은 Shape이기 때문이다. 반대로, 모든 Shape들은 Circle이 아니기 떄문에 shape와 circleWriter는 조합할 수 없다.

이 관계가 contravariance를 사용해서 모델링한 것이다. JsonWriter[Shape]는 JsonWriter[Circle]의 subtype이다. 왜냐하면 Circle이 Shape의 subtype이기 때문이다. 이는 JsonWriter[Circle]을 볼수 있으면 하는 모든 곳에서 shapeWriter를 쓸 수 있다는 것을 의미한다.
 
*Invariance*
Invariance는 설명하기에는 가장 간단한 내용이다. 요건 우리가 +나 -를 type constructor에 사용하지 않을 때 얻을 수 있는 것을 말한다.

#+BEGIN_SRC scala
trait F[A]
#+END_SRC

이 코드의 의미는 F[A]와 F[B]가 A와 B의 관계가 어떻든 간에 서로 간에 전혀 subtype이 형성되지 않음을 의미한다. 이는 Scala type constructor를 위한 기본적인 의미이다.

compiler는 implicit을 찾을 때 매칭되는 type이나 subtype을 찾는다. 그래서 몇몇 확장으로 type class instance를 제어하기 위해서 variance annotation을 사용할 수 있다.

여기서 발생하는 두가지 issue가 있다. 다음과 같은 algebraic data type이 있다고 생각해보자.

#+BEGIN_SRC scala
sealed trait A
final case object B extends A
final case object C extends A
#+END_SRC

이슈는 다음과 같다 

1. 만약 가능하다면 선택된 supertype에 정의된 instance가 선택될 수 있는가? 예를 들어, A의 instance를 정의하고 B와 C type의 값으로 사용이 가능한가?

2. supertype의 subtype을 위한 instance가 선택될 수 있는가?

한번에 두가지를 다 할수는 없다. 우리가 할 수 있는 행동은 다음의 세가지 선택지이다.

완벽한 시스템이 없다는 건 확실하다. Cats는 일반적으로 invariant type class를 사용하는 것을 선호한다. 이는 원한다면 subtype을 위한 더 자세한 instance를 정의할 수 있도록 한다는 것을 의미한다. 우리가 만약 Some[Int] type의 값을 가지고 있다면 Option을 위한 type class instance는 사용되지 않을 것이라는 것을 의미한다. 이 문제를 해결하기 위해서 Some(1) : Option[Int] 같은 type annotation을 사용하거나 Option.apply, Option.empty, some, none method같은 "smart constructor"를 사용할 수 있고 이는 Section 1.5.3에서 살펴봤다

** Summary
이 챕터에서는 type class를 처음 살펴보았다. Cats의 Show와 Eq를 이용한 두가지 예제를 살펴보기 전에 plain Scala를 사용한 Printable type class를 구현해봤다.

우리는 Cats type class에 있는 일반적인 패턴을 보아왔다.
- type class자체는 cats package에 있는 generic trait이다.
- 각 type class는 instance를 materialize할 수 있는 apply method를 가지고 있는 companion object를 가지고 있다. apply method는 instance를 만들기 위한 하나 혹은 그 이상의 /constructor/와 관련된 helper method들을 가지고 있다. 
- Default instance들은 cats.instances 패키지에서 object를 통해서 제공되고 type class에서 보다 parameter type에 의해서 구성된다.
- 많은 type class들은 cats.syntax package를 통해 제공되는 /syntax/를 가진다.

Part 1의 남은 챕터에서는 몇몇 폭넓고 강력한 type class를 살펴볼 것이다 - Semigroup, Monoid, Functor, Semigroupal, Applicative, Traverse 등등이다. 각각의 경우에 대해서 우리는 type class가 제공하는 기능과 따르고 있는 규칙들과 어떻게 Cats에 구현되어 있는 지를 배울 것이다. 이 type class들 중에 많은 부분은 Show나 Eq보다 더 추상화되어 있다. 이러한 부분이 배우기 더 어렵게 하기도 하지만 우리의 코드에 있는 일반적인 문제들을 푸는데 훨씬 더 유용하게 해준다.


