#+STARTUP: showall
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage{kotex}
#+LATEX_HEADER: \usepackage{CJKutf8}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage[scale=0.75,twoside,bindingoffset=5mm]{geometry}
#+LATEX_HEADER: \usepackage[onehalfspacing]{setspace}
#+LATEX_HEADER: \usepackage{longtable}
#+AUTHOR: billy.angels
#+TITLE: Scala with Cats


* 5.Monad Transaformers
Monad는 브리또와 같다. 한번 맛을 보면 스스로 그것을 계속해서 다시 가져오는 방법을 찾게 될 것이다. 이 부분에 이슈가 없는 것은 아니다. 브리또는 허리를 부풀게 할수 있는 것처럼, monad도 nested for-comprehension을 통해 code base를 부풀게 할 수 있다.

데이터베이스와 통신하는 것을 상상해보자. 사용자 record를 찾고자 한다고 하자. 사용자는 있을 수도 있고, 없을 수도 있으므로 Option[User]를 리턴한다. 데이터베이스와의 통신은 다양한 이유로 실패할 수 있다.(네트워크 이슈, 인증 문제 등) 그래서 이 결과는 Either[Error, Option[User]]의 마지막 값을 주는 Either로 쌓일수 있다.

이 값을 사용하기 위해서는 flatMap call을 nest해야만 한다(혹은 for-comprehension과 동일하다)

#+BEGIN_SRC scala
def lookupUserName(id: Long): Either[Error, Option[String]] = for {
    optUser <- lookupUser(id)
  } yield {
    for { user <- optUser } yield user.name
  }
#+END_SRC

이는 빠르게 매우 지루해졌다.

** Exercise: Composing Monads
한가지 질문이 떠오른다. 두 개의 임의의 monad가 주어졌다고 하자, 이 두개를 하나의 monad로 만들수 있을까? 그 말인 즉슨 monad가 compose될 수 있을까? 다음과 같이 코드를 작성할수 있다. 하지만 문제가 있는 코드다

#+BEGIN_SRC scala
import cats.Monad
import cats.syntax.applicative._ // for pure
import cats.syntax.flatMap._     // for flatMap
import scala.language.higherKinds

// Hypothetical example. This won't actually compile:
def compose[M1[_]: Monad, M2[_]: Monad] = {
  type Composed[A] = M1[M2[A]]

  new Monad[Composed] {
    def pure[A](a: A): Composed[A] =
      a.pure[M2].pure[M1]

    def flatMap[A, B](fa: Composed[A])
        (f: A => Composed[B]): Composed[B] =
      // Problem! How do we write flatMap?
      ??? 
  }
}
#+END_SRC

M1과 M2에 대해서 무언가 알지 못하면 ~flatMap~ 의 일반적인 정의를 작성하는 것은 불가능하다. 하지만, 만약 우리가 하나 혹은 다른 monad에 대해서 무언가를 안다면, 이 코드를 완성할 수 있다. 예를 들어, 만약 M2를 Option으로 고칠 수 있다면 ~flatMap~ 의 정의를 할 수 있다.

#+BEGIN_SRC scala
def flatMap[A, B](fa: Composed[A])
    (f: A => Composed[B]): Composed[B] =
  fa.flatMap(_.fold(None.pure[M])(f))
#+END_SRC

위의 정의는 ~None~ 의 사용을 가능하게 했다는 것을 기억하자(~None~ 은 일반적인 ~Monad~ interface에서 볼 수 없는 Option-specific 개념이다) ~Option~ 과 다른 monad들을 조합하기 위해서는 이러한 extra detail이 필요하다. 이와 유사하게 monadeㅡㄹ을 위한 ~flatMap~ method들을 조합하는 것을 도와주는 다른 monad들에 대한 것들이 있다. 이러한 것이 monad transformer의 기반이 되는 아이디어이다. Cats는 다양한 monad를 위한 transformer들을 정의하고 있고, 각각의 transformer들은 다른 monad들을 compose하기 위해서 필요한 extra knowledge를 제공해야 한다. 몇가지 예제를 살펴보자 

** A Transformative Example
Cats는 많은 monad들을 위한 transformer를 제공한다. 각각의 transformer는 T의 suffix를 가진 이름을 가지고 있다. ~EitherT~ 는 Either를 다른 모나드와 compose해주고, ~OptionT~ 는 Option과 compose해주는 것과 같다

다음은 List[Option[A]]를 하나의 monad로 transform하기 위해서 ~OptionT~ 를 사용해서 ~List~ 와 ~Option~ 을 compose하는 예제이다. ~OptionT[List, A]~ 를 편의상 ~ListOption[A]~ 로 alias했다.  

#+BEGIN_SRC scala
import cats.data.OptionT

type ListOption[A] = OptionT[List, A]
#+END_SRC

ListOption을 안에서 밖으로 어떻게 꺼내는지를 볼 필요가 있다. 외부 monad의 타입인 List를 inner monad를 위한 transformer인 OptionT에 파라미터로 넘긴다.

OptionT constructor나 더 편리하게는 pure를 사용해서 ListOption의 instance를 생성할 수 있다

#+BEGIN_SRC scala
import cats.Monad
import cats.instances.list._     // for Monad
import cats.syntax.applicative._ // for pure

val result1: ListOption[Int] = OptionT(List(Option(10))) // result1: ListOption[Int] = OptionT(List(Some(10)))

val result2: ListOption[Int] = 32.pure[ListOption] // result2: ListOption[Int] = OptionT(List(Some(32)))
#+END_SRC

~map~ 과 ~flatMap~ method는 ~List~ 와 ~Option~ 을 하나의 operation으로 만들어주는 method에 대응되는 method들을 combine한다

#+BEGIN_SRC scala
result1.flatMap { (x: Int) =>
  result2.map { (y: Int) =>
    x+y 
  }
}
#+END_SRC

이것이 모든 monad transformer의 기본이다. combined ~map~ 과 ~flatMap~ 은 recursive하게 computation의 각 단계마다 값을 unpack과 repack하지 않고 component monad를 사용할 수 있게 해준다. API를 좀 더 깊게 살펴보자

#+BEGIN_QUOTE
import의 복잡성



#+END_QUOTE

** Monad Transformers in Cats
각 monad transformer는 cats.data에 정의된 data type이고, 이는 새로운 monad를 만들기 위해 monad의 stack을 쌓을 수 있도록 한다. Monad type class를 통해서 우리가 만든 monad를 사용할 수 있다. monad transformer를 이해하기 위해서 우리가 다루어야 하는 주요 개념은 다음과 같다:

- 사용가능한 transformer class들;
- transformer를 이용해서 monad들의 stack을 어떻게 만드는지;
- monad stack의 instance들을 어떻게 구축하는지;
- wrapped monad에 접근하기 위해서 stack을 어떻게 pull apart하는지; 

*** The Monad Transformer Classes 
convention에 따라, Cats에서 monad Foo는 FooT라고 불리는 transformer class를 가지게 될 것이다. 사실, Cats의 많은 monad들은 Id monad를 가진 monad transformer와 combine되는 것으로 정의된다. 더 자세하게 보면, 사용가능한 instance의 몇몇은 다음과 같다

- Option을 위한 cats.data.OptionT
- Either를 위한 cats.data.EitherT
- Reader를 위한 cats.data.ReaderT
- Writer를 위한 cats.data.WriterT
- State를 위한 cats.data.StateT
- Id monad를 위한 cats.data.IdT

#+BEGIN_QUOTE
Klesli Arrows

Section 4.8에서 Reader monad는 "kleisli arrow"라고 불리는 더 일반적인 개념의 specialisation이라고 했었다. Cats에서는 cats.data.Kleisli로 표현된다.

이제 Kleisli와 ReaderT는 사실 똑같은 것이라는 것을 알 수 있다. ReaderT는 Kleisli로 type alias되어 있다.
#+END_QUOTE

*** Building Monad Stacks
이 모든 monad transformer는 같은 convention을 따른다. transformer 자체는 stack에서 inner monad를 표현하지만, 첫번째 type parameter는 outer monad를 정의한다. 남은 type parameter들은 대응되는 monad를 형성하기 위해서 사용된 type들이다.

예를 들어, ListOPtion type은 OptionT[List, A]로 alias되었다. 하지만 result는 List[Option[A]]이다. 다시 말해 안에서부터 밖으로 monad stack을 구축한다.

#+BEGIN_SRC scala
type ListOption[A] = OptionT[List, A]
#+END_SRC

많은 monad들과 모든 transformer들은 최소한 두개의 type parameter를 가지고, 그래서 종종 중간 단계를 위한 type alias들을 정의해야만 한다.

예를 들어, 

*** Constructing and Unpacking Instances
*** Default Instances
*** Usage Patterns
** Exercise: Monads: Transform and Roll Out
** Summary

