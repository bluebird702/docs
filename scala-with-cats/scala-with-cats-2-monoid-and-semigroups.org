#+STARTUP: showall
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage{kotex}
#+LATEX_HEADER: \usepackage{CJKutf8}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage[scale=0.75,twoside,bindingoffset=5mm]{geometry}
#+LATEX_HEADER: \usepackage[onehalfspacing]{setspace}
#+LATEX_HEADER: \usepackage{longtable}
#+AUTHOR: billy.angels
#+TITLE: Scala with Cats


* 2.Monoids and Semigroups
이 장에서는 첫번째 type class인 monoid와 semigroup을 살펴볼 것이다. 이 두가지 type class는 값을 추가하거나 합칠 수 있도록 해준다. Ints, String, Lists, Options 등을 많은 instance들이 있다. 추출할 수 있는 공통의 원칙을 볼 수 있는 몇가지 간단한 type과 operation을 살펴보자

*Integer addition*
Ints의 더하기는 닫힌 binary operations이다(닫힌이라는 뜻은 두개의 Ints를 더해도 항상 또다른 Int를 생성한다는 것을 의미한다.)

#+BEGIN_SRC scala
2 + 1
// res0: Int = 3
#+END_SRC

또한 어떤 Int값에 대해서 a + 0 == 0 +a a == a인 identity element 0의 값이 존재한다. 

#+BEGIN_SRC scala
2 + 0
// res1: Int = 2
0 + 2
// res2: Int = 2
#+END_SRC

더하기에는 또다른 속성이 존재한다. 예를 들어서 어떤 순서로든지 element를 더할 수 있다. 왜냐하면 항상 동일한 결과를 얻을 수 있기 때문이다. 이를 associativity라고 한다.

#+BEGIN_SRC scala
(1 + 2) + 3
// res3: Int = 6
1 + (2 + 3)
// res4: Int = 6
#+END_SRC 

*Integer multiplication*
더하기의 속성들은 또한 곱하기에도 적용가능하다. identity value로 1을 사용하면 말이다

#+BEGIN_SRC scala
1*3
// res5: Int = 3
3*1
// res6: Int = 3
#+END_SRC

더하기와 마찬가지로 곱하기도 associative하다.

#+BEGIN_SRC scala
(1 * 2) * 3
// res7: Int = 6
1 * (2 * 3)
// res8: Int = 6
#+END_SRC

*String and sequence concatenation*
Strings도 binary operator로 concatenation해서 더할 수 있다

#+BEGIN_SRC scala
 "One" ++ "two"
// res9: String = Onetwo
#+END_SRC

identity value로는 empty string을 사용하면 된다

#+BEGIN_SRC scala
"" ++ "Hello"
// res10: String = Hello
"Hello" ++ ""
// res11: String = Hello
#+END_SRC

또한 concatenation은 associative하다
#+BEGIN_SRC scala
("One" ++ "Two") ++ "Three"
// res12: String = OneTwoThree

"One" ++ ("Two" ++ "Three")
// res13: String = OneTwoThree
#+END_SRC

sequence와 함께 병렬처리를 할 수 있기 위해서 더 일반적인 +보다 ++를 사용한 것을 기억하자. binary operator로서 concatenation과 identity로서 빈 sequence를 사용하여 다른 type의 sequence도 같은 방식으로 할 수 있다.

** Definition of a Monoid
위에서 각각의 associative binary addition과 identity element를 가지는 더하기 시나리오들을 봤다. 이것이 monoid이다. type A를 위한 monoid는 다음의 규칙을 만족한다

- type (A, A) => A를 하는 combine operation
- type A의 element empty

이 정의는 훌륭하게 Scala code로 만들어낼 수 있다. 다음은 Cats에 있는 아주 간단한 버전의 Monoid정의이다.

#+BEGIN_SRC scala
trait Monoid[A] {
  def combine(x: A, y: A): A
  def empty: A
}
#+END_SRC

combine과 empty operatio을 제공하는 것에 추가로, monoid는 몇가지 법칙을 따라야만 한다. A type인 모든 값 x,y,z에 대해서 combine은 associative하고 empty는 identity element여야 한다.

#+BEGIN_SRC scala
def associativeLaw[A](x: A, y: A, z: A)
      (implicit m: Monoid[A]): Boolean = {
  m.combine(x, m.combine(y, z)) ==
    m.combine(m.combine(x, y), z)
}
def identityLaw[A](x: A)
      (implicit m: Monoid[A]): Boolean = {
  (m.combine(x, m.empty) == x) &&
    (m.combine(m.empty, x) == x)
}
#+END_SRC
Integer 빼기는 Monoid가 아니다. 왜냐하면 빼기는 associative하지 않기 때문이다.

#+BEGIN_SRC scala
(1 - 2) - 3
// res15: Int = -4
1 - (2 - 3)
// res16: Int = 2
#+END_SRC

실제로 Monoid instance를 작성할 때에는 해당 규칙들에 대해서만 생각하면 된다. 규칙을 어긴 instance들은 Cats 내의 다른 부분에서 사용될 때 의도치 않은 결과를 낼 수 있기 때문이다. 대부분의 경우 Cats가 제공하는 instance에 의지할 수 있고 library 개발자들은 개발자들 스스로 무슨 일을 하는 지 알고 있다고 가정한다. 

** Definition of a Semigroup
semigroup은 monoid의 combine 부분만을 말한다. 많은 semigroup들은 monoid이지만, empty를 정의할 수 없는 몇몇 data type들이 있다. 예를 들면 sequence concatenation과 integer addition은 monoid라는 걸 이미 살펴봤다. 하지만 만약 우리가 non-empty sequence와 positive integer만으로 제한한다면 더 이상 empty element를 정의할 수 없다. Cats는 Semigroup의 구현이 있지만 Monoid의 구현은 아닌 NonEmptyList data type을 가지고 있다.

Cats의 Monoid의 더욱 정확한 의미는 다음과 같다
#+BEGIN_SRC scala
trait Semigroup[A] {
  def combine(x: A, y: A): A
}
trait Monoid[A] extends Semigroup[A] {
  def empty: A
}
#+END_SRC

type class에 대해서 논의 할 때 이러한 상속의 종류에 대해서 살펴볼 것이다. 상속은 modularity를 제공하고 재사용할 수 있도록 해준다. 만약 type A에 대한 Monoid를 정의한다면 Semigroup은 공짜로 얻게 된다. 이와 유사하게, 만약 method가 Semigroup[B]의 type의 parameter를 필요로 한다면, 우리는 Monoid[B]를 대신 넘길 수 있다.
 
** Exercise: The Truth About Monoids
monoid를 위한 몇가지 예제를 살펴보긴 했지만 이에 대한 예제는 훨씬 더 많다. Boolean을 생각해보자. 이 type에 대해 얼마나 많은 Monoid를 정의할 수 있을까?? 각각의 monoid는 combine과 empty operation을 정의하고 스스로 monoid 규칙을 만족시켰다는 걸 납득하자. 시작할 때에는 다음의 정의를 사용하자.

#+BEGIN_SRC scala
trait Semigroup[A] {
  def combine(x: A, y: A): A
}
trait Monoid[A] extends Semigroup[A] {
  def empty: A
}
object Monoid {
  def apply[A](implicit monoid: Monoid[A]) =
    monoid 
}
#+END_SRC

** Exercise: All Set for Monoids
** Monoids in Cats
이제 monoid가 무엇인지에 대해서 보았으니, Cats에서는 어떻게 구현했는지 살펴보자. 다시 한번 구현의 세가지 요소를 살펴보자: /type/ class, the /instance/, and the /interface/

*** The Monoid Type Class
monoid type class는 cats.kernel.Monoid이다. 이 클래스는 cats.Monoid로 alias되어 있다. Monoid는 cats.Semigroup으로 alias된 cats.kernel.Semigroup을 상속한다. Cats를 사용할 때에는 보통 cats package에 있는 type class를 import한다

#+BEGIN_SRC scala
import cats.Monoid
import cats.Semigroup
#+END_SRC

Cats Kernel?

Cats Kernel은 전체 Cats toolbox를 필요로 하지 않는 library를 위한 작은 typeclass의 집합을 제공하는 Cats의 subproject이다. 이 core type class들은 기술적으로 cats.kernel package에 정의되어 있지만, 모두 cats package로 alias되어 있어서 구별을 거의 할 수 없다. 

이 책에서 다루는 Cats Kernel type class들은 Eq, Semigroup, Monoid이다. 다른 type class들은 main Cats project의 부분이고 그대로 cats package에 정의되어 있다.

*** Monoid Instances
Monoid는 user interface를 위한 standard Cats pattern을 따른다: companion object는 특정 type을 위한 type class instance를 리턴하는 apply method를 가진다. 예를 들어, 만약 String을 위한 monoid instance를 원한다면 정확한 implicit을 scope에 넣어야 한다. 그러면 다음과 같이 작성할 수 있다

#+BEGIN_SRC scala
import cats.Monoid
import cats.instances.string._ // for Monoid

Monoid[String].combine("Hi ", "there")
// res0: String = Hi there

Monoid[String].empty
// res1: String = ""
#+END_SRC

#+BEGIN_SRC scala
Monoid.apply[String].combine("Hi ", "there") // res2: String = Hi there

Monoid.apply[String].empty
// res3: String = ""
#+END_SRC

이미 알고 있듯이, Monoid는 Semigroup을 extends한다. 만약 empty가 필요없다면 다음과 같이 작성할 수 있다.

#+BEGIN_SRC scala
import cats.Semigroup

Semigroup[String].combine("Hi ", "there")
// res4: String = Hi there
#+END_SRC

Monoid를 위한 type class instance는 Chapter1에서 설명한 표준적인 방법으로 cats.instance에 들어있다. 예를 들어, 만약 우리가 Int를 위한 instance를 땡겨오고 싶다면, cats.instance.int를 import하자

#+BEGIN_SRC scala
import cats.Monoid
import cats.instances.int._ // for Monoid

Monoid[Int].combine(32, 10)
// res5: Int = 42
#+END_SRC

이와 비슷하게, cats.instance.int와 cats.instances.option의 instance를 조합해서 Monoid[Option[Int]]를 만들수도 있다.

#+BEGIN_SRC scala
import cats.Monoid
import cats.instances.int._    // for Monoid
import cats.instances.option._ // for Monoid

val a = Option(22)
// a: Option[Int] = Some(22)

val b = Option(20)
// b: Option[Int] = Some(20)

Monoid[Option[Int]].combine(a, b)
// res6: Option[Int] = Some(42)
#+END_SRC

Chapter 1의 import를 위한 더 편리한 list를 참조하자.

*** Monoid Syntax
Cats는 combine method를 위해 |+|라는 operator로 syntax를 제공한다. combine는 기술적으로 Semigroup에 있기 때문에, cats.syntax.semigroup을 import함으로써 syntax에 접근할 수 있다.

#+BEGIN_SRC scala
import cats.instances.string._ // for Monoid
import cats.syntax.semigroup._ // for |+|

val stringResult = "Hi " |+| "there" |+| Monoid[String].empty // stringResult: String = Hi there

import cats.instances.int._ // for Monoid

val intResult = 1 |+| 2 |+| Monoid[Int].empty
// intResult: Int = 3
#+END_SRC

*** Exercise: Adding All The Things
** Application of Monoids
이제 monoid가 먼지 알게 됬다. monoid는 adding 혹은 combining의 개념을 추상화 한것이다. 그런데 이게 어디에 유용할까? 여기에 monoid가 유용하게 사용될 수 있는 몇가지 아이디어들이 있다. 각 case study들에 대한 구체적인 내용은 책의 뒤에서 알아볼 것이다.
*** Big Data
Spark이나 Hadoop같은 big data application에서는 주어진 fault tolerance와 scalability에서 많은 machine간에 data analysis를 분산해야 한다. 이에 대한 말씀은 각 machine이 데이터 일부분의 결과를 돌려주고 결국에는 이를 combine해서 최종 결과를 얻어야 된다는 것을 의미한다. 이런 경우는 우리가 monoid의 관점에서 볼 수 있다.
만약 우리가 website의 전체 방문자수를 계산하고자 한다면, data의 각 port에서 Int를 계산한다는 것을 의미한다. Int의 monoid instance는 addition이고, 이는 부분적인 값들을 합치기 위한 적합한 방법임을 알고 있다.
만약 website가 받은 unique visitor가 얼마인지를 알고 싶다고 하면, 이는 data의 각 portion에서의 Set[User]를 구축하는 것과 같다. 우리는 Set을 위한 monoid instance가 set union인 것을 알고 있으며, 이는 부분적인 값들을 합치기 위한 적합한 방법임을 알고 있다.
만약 server log로부터 99% 그리고 95%의 response time을 계산하려고 한다면 우리는 monoid인 QTree라고 불리는 데이터 structure를 사용할 수 있다.
여기서 아이디어를 얻었기를 바란다. 대부분 우리가 큰 데이터 셋에서 구하고자 하는 모든 분석은 monoid이며, 이 아이디어로부터 표현력있고 강력한 분석 시스템을 만들어낼 수 있다. 이것이 바로 Twitter가 Algebird와 Summingbird프로젝트에서 하고 있는 방식이다. 우리는 이 아이디어를 map-reduce case study까지 확장해볼 수 있다.

*** Distributed Systems
분산 시스템에서, 서로 다른 머신은 data의 서로 다른 부분의 내용을 처리한다. 예를 들어, 하나의 머신은 다른 머신이 받지 않은 update 정보를 받을 수도 있다. 이 다른 관점을 조정시키기 위해서, 모든 머신은 더 이상의 update가 도착하지 않는 다면 같은 데이터를 유지한다. 이를 eventual consistency라고 한다.

data type의 특정한 클래스가 이 조정을 지원한다. 이 data type들은 commutative replicated data type(CRDTs)이라고 불린다. 주요 동작은 두 instance에 있는 모든 정보를 수집한 결과를 가지고 두 데이터 instance를 조합하는 것이다. 이 동작은 monoid instance를 가지는 것에 의존한다. CRDT case study에 대한 것은 뒤에서 더 살펴보자

*** Monoids in the Small
위의 두가지 예제는 monoid가 entire system archtecture에 정보를 제공하는 예제이다. monoid를 가지고 작은 코드 조각들을 더 쉽게 만들수 있도록 하는 많은 경우들이 있다. 이런 것들은 이 책의 case study에서 많은 예제로 살펴볼 것이다.

** Summary
이 장에서는 큰 마일스톤을 달성했다. 근사한 functional programming name을 가진 첫번째 type class를 다루었다.

- Semigroup은 addition 혹은 combination operation을 나타낸다.
- Monoid는 Semigroup을 상속하고 추가적으로 identity나 "zero" element를 추가한다.

Semigroup과 Monoid는 세가지를 import함으로써 사용할 수 있다:type class, 다루어야 하는 type의 instance들, 그리고 |+| operator를 쓸 수 있게 해주는 semigroup syntax이다

#+BEGIN_SRC scala
import cats.Monoid
import cats.instances.string._ // for Monoid
import cats.syntax.semigroup._ // for |+|

"Scala" |+| " with " |+| "Cats"
// res0: String = Scala with Cats
#+END_SRC

#+BEGIN_SRC scala
import cats.instances.int._    // for Monoid
import cats.instances.option._ // for Monoid
Option(1) |+| Option(2)
// res1: Option[Int] = Some(3)
import cats.instances.map._ // for Monoid

val map1 = Map("a" -> 1, "b" -> 2)
val map2 = Map("b" -> 3, "d" -> 4)

map1 |+| map2
// res3: Map[String,Int] = Map(b -> 5, d -> 4, a -> 1) 

import cats.instances.tuple._ // for Monoid

val tuple1 = ("hello", 123)
val tuple2 = ("world", 321)

tuple1 |+| tuple2
// res6: (String, Int) = (helloworld,444)
#+END_SRC

또한 Monoid의 instance를 가지는 어떤 type과도 동작할 수 있는 generic code를 작성할 수도 있다.

#+BEGIN_SRC scala
def addAll[A](values: List[A])
      (implicit monoid: Monoid[A]): A =
  values.foldRight(monoid.empty)(_ |+| _)

add(List(1, 2, 3)
add(List(None, Some(1), Some(2)))
#+END_SRC

Monoid는 Cats의 훌륭한 gateway이다. 이해하기 쉽고 사용하기 간단하다. 하지만 이는 abstraction 관점에서 Cats가 우리가 가능하게 해주는 부분의 아주 작은 일부분일 뿐이다. 다음 챕터에서는 functor를 살펴볼 것이다. functor는 사랑하는 map method의 화신인 type class이다. 재미는 여기서부터 시작이다.

